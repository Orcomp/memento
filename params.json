{"tagline":"Lightweight and Extensible Undo Framework for .NET","name":"Memento","google":"","body":"About\r\n=======\r\n\r\nMemento is a lightweight and extensible undo framework for .NET applications.\r\nIt provide undo and redo support for the following events(*) out of the box:  \r\n\r\n* Property change\r\n* Collection element addition\r\n* Collection element removal\r\n* Collection element's index change\r\n\r\nWhile these basic events have proved to be sufficient for most applications I've worked with, \r\nMemento allows you to build custom events and plug into the framework.\r\n\r\n**Note**: *events* here mean those actions that cause changes to the system state, e.g. change\r\nvalue of a property etc. They are not .NET events.\r\n\r\nGetting Started\r\n=======\r\n\r\nInstall from NuGet\r\n```csharp\r\nInstall-Package Memento\r\n```\r\n\r\nCreate an instance of a `Mementor`. \r\n```csharp\r\nvar mementor = Mementor.Create();\r\n```\r\n**Note**: it's typically sufficient to use one single instance for an entire application. \r\nBut you can create multiple instances as needed and each of them has a different undo/redo\r\nstack. Regardless, make sure you store this instance somewhere easily accessible to other\r\nparts of code.\r\n\r\n### Mark property changes\r\n```csharp\r\n// Mark change via expression syntax\r\nmementor.PropertyChange(shape, () => shape.Radius);\r\n\r\n// Mark change via string name\r\nmementor.PropertyChange(shape, \"Radius\");\r\n\r\n// Mark change with explicit property value (which will be restored to when undo)\r\nmementor.PropertyChange(shape, \"Radius\", 10);\r\n```\r\n\r\n### Mark collection changes\r\n```csharp\r\n// Addition\r\nmementor.ElementAdd(screen, shape);\r\n\r\n// Removal\r\nmementor.ElementRemove(screen, shape);\r\n\r\n// Removal with explicit index (to be restored to when undo)\r\nmementor.ElementRemove(screen, shape, index);\r\n\r\n// Index change\r\nmementor.ElementIndexChange(screen, shape);\r\n\r\n// Index change with explicit index (to be restored to when undo)\r\nmementor.ElementIndexChange(screen, shape, index);\r\n```\r\n### Perform undo and redo\r\n```csharp\r\n// Undo the last event\r\nif (mementor.CanUndo) mementor.Undo();\r\n\r\n// Redo a previous undo\r\nif (mementor.CanRedo) mementor.Redo();\r\n```\r\n\r\n### Reset\r\n\r\nAt any point of time, you can reset a `Mementor` to its original state.\r\n```csharp\r\nmementor.Reset();\r\n```\r\n\r\n### Batch multiple changes\r\n\r\nIf you want to undo multiple events at once, batch them together.\r\n```csharp\r\n// Batch via block\r\nmementor.Batch(() => {\r\n\t// change events happen here\r\n});\r\n\r\n// Undo all events in the previous batch\r\nmementor.Undo(); \r\n\r\n// Batch explicitly\r\nmementor.BeginBatch();\r\n// ... sometime later\r\nmementor.EndBatch(); \r\n\r\n```\r\n\r\n### Disable change marking\r\n\r\nIf you want to temporarily disable marking (effectively making `Mementor` ignores\r\nall calls to change marking methods like `PropertyChange`), do one of the followings.\r\n```csharp\r\nmementor.ExecuteNoTrack(() => { \r\n\t// changes happened in this block are ignored\r\n});\r\n\r\nmementor.IsTrackingEnabled = false;\r\n```\r\n\r\n### Event handling\r\n\r\nYou can be notified when there is change to the undo/redo stack of a `Mementor` \r\nby handling its `Changed` event. For example if you call `Undo()`, this event\r\nwill be fired with the associated undone event.\r\n```csharp\r\nmementor.Changed += (_, args) => {\r\n\t// args allow you to access to the event associated with this notification\r\n}\r\n```\r\n\r\n### Custom events\r\n\r\nYou can write your own custom event by extending `Memento.BaseEvent` class.\r\nThen you can use it with a `Mementor` as follows.\r\n```csharp\r\nmementor.MarkEvent(customEvent);\r\n```\r\n\r\n### Want to learn more?\r\nThe comprehensive test suite for Memento should be a good source of reference.\r\n\r\nContact\r\n=======\r\n\r\n* Email: [buunguyen@gmail.com](mailto:buunguyen@gmail.com)\r\n* Blog: [www.buunguyen.net](http://www.buunguyen.net/blog)\r\n* Twitter: [@buunguyen](https://twitter.com/buunguyen/)\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}